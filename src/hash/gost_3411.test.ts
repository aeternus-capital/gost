import GOST3411Hash from './gost_3411.ts';
import { assertEquals } from 'jsr:@std/assert';

Deno.test('check M1', async (t) => {
    const message = new Uint8Array([
        50, 49, 48, 57, 56, 55, 54, 53, 52, 51, 50, 49,
        48, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 57,
        56, 55, 54, 53, 52, 51, 50, 49, 48, 57, 56, 55,
        54, 53, 52, 51, 50, 49, 48, 57, 56, 55, 54, 53,
        52, 51, 50, 49, 48, 57, 56, 55, 54, 53, 52, 51,
        50, 49, 48,
    ]);

    await t.step('256 bits', () => {
        const precomputed = new Uint8Array( [
              0,  85, 123, 229, 229, 132, 253,  82,
            164,  73, 177, 107,   2,  81, 208,  93,
             39, 249,  74, 183, 108, 186, 166, 218,
            137,  11,  89, 216, 239,  30,  21, 157,
        ]);

        assertEquals(new GOST3411Hash(256).hash(message), precomputed);
    });

    await t.step('512 bits', () => {
        const precomputed = new Uint8Array( [
             72, 111, 100, 193, 145, 120, 121,  65, 127, 239,   8,
             43,  51, 129, 164, 226,  17, 195,  36, 240, 116, 101,
             76,  56, 130,  58, 123, 118, 248,  48, 173,   0, 250,
             31, 186, 228,  43,  18, 133, 192,  53,  47,  34, 117,
             36, 188, 154, 177,  98,  84,  40, 141, 214, 134,  61,
            204, 213, 185, 245,  74,  26, 208,  84,  27,
        ]);

        assertEquals(new GOST3411Hash(512).hash(message), precomputed);
    });
});

Deno.test('check M2', async (t) => {
    const message = new Uint8Array([
        251, 226, 229, 240, 238, 227, 200,  32, 251, 234, 250,
        235, 239,  32, 255, 251, 240, 225, 224, 240, 245,  32,
        224, 237,  32, 232, 236, 224, 235, 229, 240, 242, 241,
         32, 255, 240, 238, 236,  32, 241,  32, 250, 242, 254,
        229, 226,  32,  44, 232, 246, 243, 237, 226,  32, 232,
        230, 238, 225, 232, 240, 242, 209,  32,  44, 232, 240,
        242, 229, 226,  32, 229, 209,
    ]);

    await t.step('256 bits', () => {
        const precomputed = new Uint8Array([
             80, 143, 126,  85,  60,   6,  80,  29,
            116, 154, 102, 252,  40, 198, 202, 192,
            176,   5, 116, 109, 151,  83, 127, 168,
             93, 158,  64, 144,  78, 254, 210, 157,
        ]);

        assertEquals(new GOST3411Hash(256).hash(message), precomputed);
    });

    await t.step('512 bits', () => {
        const precomputed = new Uint8Array( [
             40, 251, 201, 186, 218,   3,  59,  20,  96, 100,  43,
            220, 221, 185,  12,  63, 179, 229, 108,  73, 124, 205,
             15,  98, 184, 162, 173,  73,  53, 232,  95,   3, 118,
             19, 150, 109, 228, 238,   0,  83,  26, 230,  15,  59,
             90,  71, 248, 218, 224, 105,  21, 213, 242, 241, 148,
            153, 111, 202, 191,  38,  34, 230, 136,  30,
        ]);

        assertEquals(new GOST3411Hash(512).hash(message), precomputed);
    });
});
